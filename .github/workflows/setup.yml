name: Ëá™Âä®ÂàõÂª∫È°πÁõÆÁªìÊûÑ

on:
  workflow_dispatch:  # ÊâãÂä®Ëß¶Âèë
  push:
    branches: [ main, master ]
    paths: [ '.github/workflows/setup.yml' ]

permissions:
  contents: write  # Ê∑ªÂä†ÂÜôÊùÉÈôê
  actions: read

jobs:
  setup-project:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤
        
    - name: ËÆæÁΩÆGitÈÖçÁΩÆ
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Ê£ÄÊü•ÂΩìÂâçÁä∂ÊÄÅ
      run: |
        echo "ÂΩìÂâçÂàÜÊîØ: $(git branch --show-current)"
        echo "‰ªìÂ∫ìÁä∂ÊÄÅ:"
        git status
        echo "Áé∞ÊúâÊñá‰ª∂:"
        ls -la
        
    - name: ÂàõÂª∫È°πÁõÆÁªìÊûÑ
      run: |
        echo "üöÄ ÂàõÂª∫ICT TechInsightÈ°πÁõÆÁªìÊûÑ..."
        
        # ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑÔºàÂè™Êúâ‰∏çÂ≠òÂú®ÁöÑÊó∂ÂÄôÊâçÂàõÂª∫Ôºâ
        mkdir -p config
        mkdir -p workflows/blueprints/competitor_intelligence
        mkdir -p workflows/blueprints/academic_research
        mkdir -p workflows/blueprints/opensource_ecosystem
        mkdir -p workflows/blueprints/ai_analysis
        mkdir -p workflows/docs
        mkdir -p workflows/schemas
        mkdir -p scripts
        mkdir -p utils
        mkdir -p tests
        mkdir -p data/sample
        mkdir -p data/schemas
        mkdir -p docs
        mkdir -p deployment/docker
        mkdir -p deployment/kubernetes
        
        echo "üìÅ ÁõÆÂΩïÂàõÂª∫ÂÆåÊàê"
        
    - name: ÂàõÂª∫PythonÂåÖÊñá‰ª∂
      run: |
        # ÂàõÂª∫__init__.pyÊñá‰ª∂
        touch scripts/__init__.py
        touch utils/__init__.py
        touch tests/__init__.py
        touch config/__init__.py
        
        echo "üì¶ PythonÂåÖÊñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
        
    - name: ÂàõÂª∫requirements.txt
      run: |
        if [ ! -f requirements.txt ]; then
          cat > requirements.txt << 'EOF'
        # Ê†∏ÂøÉ‰æùËµñ
        requests>=2.31.0
        jsonschema>=4.17.0
        python-dateutil>=2.8.2
        
        # Êï∞ÊçÆÂ§ÑÁêÜ
        pandas>=2.0.0
        numpy>=1.24.0
        
        # ÈÖçÁΩÆÁÆ°ÁêÜ
        python-dotenv>=1.0.0
        pyyaml>=6.0
        
        # ÊµãËØïÊ°ÜÊû∂
        pytest>=7.3.0
        pytest-cov>=4.1.0
        
        # APIÂÆ¢Êà∑Á´Ø
        google-api-python-client>=2.86.0
        google-auth-httplib2>=0.1.0
        google-auth-oauthlib>=1.0.0
        
        # ÂºÄÂèëÂ∑•ÂÖ∑
        black>=23.0.0
        flake8>=6.0.0
        mypy>=1.3.0
        EOF
          echo "‚úÖ requirements.txt ÂàõÂª∫ÂÆåÊàê"
        fi
        
    - name: ÂàõÂª∫.gitignore
      run: |
        if [ ! -f .gitignore ]; then
          cat > .gitignore << 'EOF'
        # Python
        __pycache__/
        *.py[cod]
        *$py.class
        *.so
        .Python
        env/
        venv/
        ENV/
        env.bak/
        venv.bak/
        
        # IDEs
        .vscode/
        .idea/
        *.swp
        *.swo
        *~
        
        # OS
        .DS_Store
        .DS_Store?
        ._*
        .Spotlight-V100
        .Trashes
        ehthumbs.db
        Thumbs.db
        
        # Project specific
        .env
        *.log
        logs/
        temp/
        *.backup
        *.tmp
        
        # Data files
        data/raw/
        data/processed/
        *.csv
        *.xlsx
        
        # Secrets
        config/api_keys.env
        deployment/secrets/
        *.key
        *.pem
        credentials.json
        EOF
          echo "‚úÖ .gitignore ÂàõÂª∫ÂÆåÊàê"
        fi
        
    - name: ÂàõÂª∫ÈÖçÁΩÆÊñá‰ª∂
      run: |
        # ÂàõÂª∫settings.py
        cat > config/settings.py << 'EOF'
        """
        ICT TechInsight ÈÖçÁΩÆËÆæÁΩÆ
        """
        import os
        from pathlib import Path
        
        # È°πÁõÆÊ†πÁõÆÂΩï
        PROJECT_ROOT = Path(__file__).parent.parent
        
        # APIÈÖçÁΩÆ
        MAKE_API_BASE_URL = "https://us1.make.com/api/v2"
        MAKE_API_KEY = os.getenv("MAKE_API_KEY", "")
        MAKE_TEAM_ID = os.getenv("MAKE_TEAM_ID", "")
        
        # ÈÇÆ‰ª∂ÈÖçÁΩÆ
        ALERT_EMAIL = os.getenv("ALERT_EMAIL", "")
        SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
        SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
        SMTP_USERNAME = os.getenv("SMTP_USERNAME", "")
        SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "")
        
        # Êï∞ÊçÆÁõÆÂΩï
        DATA_DIR = PROJECT_ROOT / "data"
        BLUEPRINTS_DIR = PROJECT_ROOT / "workflows" / "blueprints"
        LOGS_DIR = PROJECT_ROOT / "logs"
        
        # ÂàõÂª∫ÂøÖË¶ÅÁõÆÂΩï
        LOGS_DIR.mkdir(exist_ok=True)
        EOF
        
        # ÂàõÂª∫APIÂØÜÈí•Á§∫‰æãÊñá‰ª∂
        cat > config/api_keys.example.env << 'EOF'
        # Make.com APIÈÖçÁΩÆ
        MAKE_API_KEY=your_make_api_key_here
        MAKE_TEAM_ID=your_team_id_here
        
        # ÈÇÆ‰ª∂ÈÖçÁΩÆ
        ALERT_EMAIL=your_alert_email@example.com
        SMTP_USERNAME=your_smtp_username
        SMTP_PASSWORD=your_smtp_password
        
        # ÂÖ∂‰ªñAPIÂØÜÈí•
        OPENAI_API_KEY=your_openai_key_here
        XAI_API_KEY=your_xai_key_here
        NEWS_API_KEY=your_news_api_key_here
        SERPAPI_KEY=your_serpapi_key_here
        
        # GoogleÊúçÂä°ÈÖçÁΩÆ
        GOOGLE_SHEETS_CREDENTIALS=path_to_credentials.json
        EOF
        
        echo "‚úÖ ÈÖçÁΩÆÊñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
        
    - name: ÂàõÂª∫Â∑•ÂÖ∑Ê®°Âùó
      run: |
        # ÂàõÂª∫logger.py
        cat > utils/logger.py << 'EOF'
        """
        Êó•ÂøóÈÖçÁΩÆÊ®°Âùó
        """
        import logging
        import sys
        from pathlib import Path
        from datetime import datetime
        
        def setup_logger(name: str, level: str = "INFO") -> logging.Logger:
            """ËÆæÁΩÆÊó•ÂøóËÆ∞ÂΩïÂô®"""
            
            # ÂàõÂª∫Êó•ÂøóÁõÆÂΩï
            log_dir = Path("logs")
            log_dir.mkdir(exist_ok=True)
            
            # ÈÖçÁΩÆÊó•ÂøóÊ†ºÂºè
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            
            # ÂàõÂª∫logger
            logger = logging.getLogger(name)
            logger.setLevel(getattr(logging, level.upper()))
            
            # ÈÅøÂÖçÈáçÂ§çÊ∑ªÂä†handler
            if logger.handlers:
                return logger
            
            # ÊéßÂà∂Âè∞ËæìÂá∫
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setFormatter(formatter)
            logger.addHandler(console_handler)
            
            # Êñá‰ª∂ËæìÂá∫
            log_file = log_dir / f"{name}_{datetime.now().strftime('%Y%m%d')}.log"
            file_handler = logging.FileHandler(log_file, encoding='utf-8')
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
            
            return logger
        EOF
        
        echo "‚úÖ Â∑•ÂÖ∑Ê®°ÂùóÂàõÂª∫ÂÆåÊàê"
        
    - name: ÂàõÂª∫ËÑöÊú¨Êñá‰ª∂
      run: |
        # ÂàõÂª∫ËìùÂõæÁÆ°ÁêÜÂô®
        cat > scripts/blueprint_manager.py << 'EOF'
        #!/usr/bin/env python3
        """
        ËìùÂõæÁÆ°ÁêÜÂô®
        ICT TechInsight Ëá™Âä®ÂåñÁ≥ªÁªüÁªÑ‰ª∂
        """
        
        import json
        import os
        import shutil
        from datetime import datetime
        from pathlib import Path
        from typing import Dict, List, Optional
        import argparse
        
        class BlueprintManager:
            def __init__(self, base_path: str = "workflows/blueprints"):
                self.base_path = Path(base_path)
                
                # Â∑•‰ΩúÊµÅÊò†Â∞Ñ
                self.workflow_mapping = {
                    "competitor": "competitor_intelligence",
                    "academic": "academic_research", 
                    "opensource": "opensource_ecosystem",
                    "ai_analysis": "ai_analysis"
                }
            
            def organize_blueprints(self):
                """Êï¥ÁêÜËìùÂõæÊñá‰ª∂Âà∞Áõ∏Â∫îÁõÆÂΩï"""
                print("ÂºÄÂßãÊï¥ÁêÜËìùÂõæÊñá‰ª∂...")
                
                blueprint_files = {
                    "Competitor_Intelligence_Collection.blueprint.json": "competitor_intelligence",
                    "Academic_Research_Collection.blueprint.json": "academic_research",
                    "OpenSource_Ecosystem_Collection.blueprint.json": "opensource_ecosystem", 
                    "ICT_TechInsight_MultiModel_AI_Analysis_v3.0.blueprint.json": "ai_analysis"
                }
                
                for filename, category in blueprint_files.items():
                    source_path = Path(filename)
                    if source_path.exists():
                        target_dir = self.base_path / category
                        target_dir.mkdir(parents=True, exist_ok=True)
                        target_path = target_dir / filename
                        
                        shutil.copy2(source_path, target_path)
                        print(f"Â∑≤ÁßªÂä® {filename} Âà∞ {target_path}")
                    else:
                        print(f"Êñá‰ª∂‰∏çÂ≠òÂú®: {filename}")
            
            def list_workflows(self) -> Dict:
                """ÂàóÂá∫ÊâÄÊúâÂ∑•‰ΩúÊµÅ"""
                workflows = {}
                
                for category_dir in self.base_path.iterdir():
                    if category_dir.is_dir():
                        category_workflows = []
                        for blueprint_file in category_dir.glob("*.json"):
                            category_workflows.append({
                                "file": blueprint_file.name,
                                "path": str(blueprint_file)
                            })
                        workflows[category_dir.name] = category_workflows
                
                return workflows
        
        def main():
            parser = argparse.ArgumentParser(description="ICT TechInsight Blueprint Manager")
            parser.add_argument("action", choices=["organize", "list"],
                               help="Ë¶ÅÊâßË°åÁöÑÊìç‰Ωú")
            
            args = parser.parse_args()
            
            manager = BlueprintManager()
            
            if args.action == "organize":
                manager.organize_blueprints()
            elif args.action == "list":
                workflows = manager.list_workflows()
                print(json.dumps(workflows, indent=2, ensure_ascii=False))
        
        if __name__ == "__main__":
            main()
        EOF
        
        chmod +x scripts/blueprint_manager.py
        echo "‚úÖ ËìùÂõæÁÆ°ÁêÜÂô®ÂàõÂª∫ÂÆåÊàê"
        
    - name: ÂàõÂª∫Á§∫‰æãÊï∞ÊçÆ
      run: |
        # ÂàõÂª∫Á´û‰∫âÂØπÊâãÁ§∫‰æãÊï∞ÊçÆ
        cat > data/sample/competitor_sample.json << 'EOF'
        {
          "company_name": "Example Corp",
          "industry_category": "Technology",
          "competitive_threat_level": "MEDIUM",
          "innovation_index": 75.5,
          "recent_news_count": 12,
          "github_activity_score": 850,
          "recent_patents_count": 3,
          "monitor_timestamp": "2024-06-17T10:30:00Z"
        }
        EOF
        
        # ÂàõÂª∫Â≠¶ÊúØÊï∞ÊçÆÁ§∫‰æã
        cat > data/sample/academic_sample.json << 'EOF'
        {
          "paper_title": "Advanced Machine Learning Techniques in ICT",
          "authors": "Smith, J.; Johnson, A.; Brown, M.",
          "journal": "IEEE Transactions on Technology",
          "publish_date": "2024-05-15",
          "citation_count": 25,
          "doi": "10.1109/example.2024.001",
          "abstract": "This paper presents novel approaches to machine learning in ICT applications..."
        }
        EOF
        
        # ÂàõÂª∫ÂºÄÊ∫êÈ°πÁõÆÁ§∫‰æã
        cat > data/sample/opensource_sample.json << 'EOF'
        {
          "repo_name": "awesome-ict-project/main",
          "description": "An innovative ICT framework for modern applications",
          "stars": 1250,
          "forks": 180,
          "language": "Python",
          "activity_score": 950,
          "maturity_level": "GROWING",
          "last_commit_days": 3
        }
        EOF
        
        echo "‚úÖ Á§∫‰æãÊï∞ÊçÆÂàõÂª∫ÂÆåÊàê"
        
    - name: ÂàõÂª∫ÊµãËØïÊñá‰ª∂
      run: |
        cat > tests/test_blueprints.py << 'EOF'
        """
        ËìùÂõæÊµãËØïÊ®°Âùó
        """
        import pytest
        import json
        from pathlib import Path
        
        def test_project_structure():
            """ÊµãËØïÈ°πÁõÆÁªìÊûÑ"""
            assert Path("config").exists()
            assert Path("scripts").exists()
            assert Path("utils").exists()
            assert Path("workflows/blueprints").exists()
            assert Path("data/sample").exists()
        
        def test_sample_data():
            """ÊµãËØïÁ§∫‰æãÊï∞ÊçÆ"""
            sample_files = [
                "data/sample/competitor_sample.json",
                "data/sample/academic_sample.json",
                "data/sample/opensource_sample.json"
            ]
            
            for sample_file in sample_files:
                path = Path(sample_file)
                assert path.exists(), f"Á§∫‰æãÊñá‰ª∂‰∏çÂ≠òÂú®: {sample_file}"
                
                with open(path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                assert isinstance(data, dict), f"{sample_file} ÂøÖÈ°ªÊòØJSONÂØπË±°"
                assert len(data) > 0, f"{sample_file} ‰∏çËÉΩ‰∏∫Á©∫"
        
        def test_imports():
            """ÊµãËØïPythonÊ®°ÂùóÂØºÂÖ•"""
            try:
                import sys
                sys.path.append('.')
                
                from utils.logger import setup_logger
                from scripts.blueprint_manager import BlueprintManager
                
                # ÊµãËØïÊó•ÂøóËÆæÁΩÆ
                logger = setup_logger("test")
                assert logger is not None
                
                # ÊµãËØïËìùÂõæÁÆ°ÁêÜÂô®
                manager = BlueprintManager()
                workflows = manager.list_workflows()
                assert isinstance(workflows, dict)
                
            except ImportError as e:
                pytest.fail(f"Ê®°ÂùóÂØºÂÖ•Â§±Ë¥•: {e}")
        EOF
        
        echo "‚úÖ ÊµãËØïÊñá‰ª∂ÂàõÂª∫ÂÆåÊàê"
        
    - name: Êõ¥Êñ∞README
      run: |
        # Âè™ÊúâÂΩìREADME‰∏çÂ≠òÂú®ÊàñËÄÖÊòØÈªòËÆ§ÁöÑÊó∂ÂÄôÊâçÊõ¥Êñ∞
        if [ ! -f README.md ] || [ "$(wc -l < README.md)" -lt 10 ]; then
          cat > README.md << 'EOF'
        # ICT TechInsight Ëá™Âä®ÂåñÁ≥ªÁªü
        
        Âü∫‰∫éMake.comÁöÑICTÊäÄÊúØÊ¥ûÂØüËá™Âä®ÂåñÊï∞ÊçÆÊî∂ÈõÜÂíåÂàÜÊûêÁ≥ªÁªü„ÄÇ
        
        ## üöÄ Âø´ÈÄüÂºÄÂßã
        
        ### 1. ÂÖãÈöÜÈ°πÁõÆ
        ```bash
        git clone https://github.com/your-username/ICT-TechInsight-Automation.git
        cd ICT-TechInsight-Automation
        ```
        
        ### 2. ËÆæÁΩÆPythonÁéØÂ¢É
        ```bash
        # ÂàõÂª∫ËôöÊãüÁéØÂ¢É
        python -m venv venv
        
        # ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É (Windows)
        venv\Scripts\activate
        
        # ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É (Linux/Mac)
        source venv/bin/activate
        
        # ÂÆâË£Ö‰æùËµñ
        pip install -r requirements.txt
        ```
        
        ### 3. ÈÖçÁΩÆAPIÂØÜÈí•
        ```bash
        # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
        cp config/api_keys.example.env .env
        
        # ÁºñËæëÈÖçÁΩÆÊñá‰ª∂
        # Â°´ÂÖ•ÊÇ®ÁöÑ Make.com API ÂØÜÈí•ÂíåÂÖ∂‰ªñÂøÖË¶ÅÈÖçÁΩÆ
        ```
        
        ### 4. ‰∏ä‰º†ËìùÂõæÊñá‰ª∂
        Â∞ÜÊÇ®ÁöÑMake.comËìùÂõæÊñá‰ª∂‰∏ä‰º†Âà∞ÂØπÂ∫îÁõÆÂΩïÔºö
        - `workflows/blueprints/competitor_intelligence/`
        - `workflows/blueprints/academic_research/`
        - `workflows/blueprints/opensource_ecosystem/`
        - `workflows/blueprints/ai_analysis/`
        
        ### 5. ËøêË°åÊµãËØï
        ```bash
        pytest tests/
        ```
        
        ## üìÅ È°πÁõÆÁªìÊûÑ
        
        ```
        ICT-TechInsight-Automation/
        ‚îú‚îÄ‚îÄ README.md
        ‚îú‚îÄ‚îÄ requirements.txt
        ‚îú‚îÄ‚îÄ .gitignore
        ‚îú‚îÄ‚îÄ config/                 # ÈÖçÁΩÆÊñá‰ª∂
        ‚îÇ   ‚îú‚îÄ‚îÄ settings.py
        ‚îÇ   ‚îî‚îÄ‚îÄ api_keys.example.env
        ‚îú‚îÄ‚îÄ workflows/              # Make.comÂ∑•‰ΩúÊµÅ
        ‚îÇ   ‚îú‚îÄ‚îÄ blueprints/        # ËìùÂõæÊñá‰ª∂
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ competitor_intelligence/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ academic_research/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ opensource_ecosystem/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ai_analysis/
        ‚îÇ   ‚îú‚îÄ‚îÄ docs/              # Â∑•‰ΩúÊµÅÊñáÊ°£
        ‚îÇ   ‚îî‚îÄ‚îÄ schemas/           # Êï∞ÊçÆÊû∂ÊûÑ
        ‚îú‚îÄ‚îÄ scripts/               # ÁÆ°ÁêÜËÑöÊú¨
        ‚îÇ   ‚îî‚îÄ‚îÄ blueprint_manager.py
        ‚îú‚îÄ‚îÄ utils/                 # Â∑•ÂÖ∑Ê®°Âùó
        ‚îÇ   ‚îî‚îÄ‚îÄ logger.py
        ‚îú‚îÄ‚îÄ tests/                 # ÊµãËØïÊñá‰ª∂
        ‚îÇ   ‚îî‚îÄ‚îÄ test_blueprints.py
        ‚îú‚îÄ‚îÄ data/                  # Êï∞ÊçÆÊñá‰ª∂
        ‚îÇ   ‚îî‚îÄ‚îÄ sample/           # Á§∫‰æãÊï∞ÊçÆ
        ‚îî‚îÄ‚îÄ deployment/            # ÈÉ®ÁΩ≤ÈÖçÁΩÆ
        ```
        
        ## üõ†Ô∏è Â∑•ÂÖ∑‰ΩøÁî®
        
        ### ËìùÂõæÁÆ°ÁêÜ
        ```bash
        python scripts/blueprint_manager.py organize
        python scripts/blueprint_manager.py list
        ```
        
        ## üìä Ê†∏ÂøÉÂäüËÉΩ
        
        - üîç **Á´û‰∫âÂØπÊâãÊÉÖÊä•Êî∂ÈõÜ** - Ëá™Âä®ÁõëÊéßÁ´û‰∫âÂØπÊâãÂä®ÊÄÅ
        - üìö **Â≠¶ÊúØÁ†îÁ©∂Êî∂ÈõÜ** - Êî∂ÈõÜÂíåÂàÜÊûêÂ≠¶ÊúØËÆ∫Êñá
        - üåü **ÂºÄÊ∫êÁîüÊÄÅÁõëÊéß** - Ë∑üË∏™ÂºÄÊ∫êÈ°πÁõÆÂíåÊäÄÊúØË∂ãÂäø
        - ü§ñ **Â§öÊ®°ÂûãAIÂàÜÊûê** - Êô∫ËÉΩÂàÜÊûêÂíåÂÜ≥Á≠ñÊîØÊåÅ
        
        ## ü§ù Ë¥°ÁåÆÊåáÂçó
        
        1. Fork È°πÁõÆ
        2. ÂàõÂª∫ÁâπÊÄßÂàÜÊîØ (`git checkout -b feature/AmazingFeature`)
        3. Êèê‰∫§ÂèòÊõ¥ (`git commit -m 'Add some AmazingFeature'`)
        4. Êé®ÈÄÅÂà∞ÂàÜÊîØ (`git push origin feature/AmazingFeature`)
        5. ÂºÄÂêØ Pull Request
        
        ## üìÑ ËÆ∏ÂèØËØÅ
        
        MIT License - ËØ¶ËßÅ [LICENSE](LICENSE) Êñá‰ª∂
        EOF
          echo "‚úÖ README.md Êõ¥Êñ∞ÂÆåÊàê"
        fi
        
    - name: ÊòæÁ§∫ÂàõÂª∫ÁªìÊûú
      run: |
        echo "üìä È°πÁõÆÁªìÊûÑÂàõÂª∫ÂÆåÊàêÔºÅ"
        echo ""
        echo "üìÅ ÁõÆÂΩïÁªìÊûÑÔºö"
        find . -type d -name ".git" -prune -o -type d -print | head -20
        echo ""
        echo "üìÑ ‰∏ªË¶ÅÊñá‰ª∂Ôºö"
        find . -name ".git" -prune -o \( -name "*.py" -o -name "*.json" -o -name "*.txt" -o -name "*.md" -o -name "*.yml" \) -print | head -20
        echo ""
        echo "üì¶ PythonÂåÖÁªìÊûÑÔºö"
        find . -name "__init__.py" -print
        
    - name: Ê£ÄÊü•GitÁä∂ÊÄÅ
      run: |
        echo "üìã GitÁä∂ÊÄÅÊ£ÄÊü•Ôºö"
        git status
        echo ""
        echo "üìù ÂæÖÊèê‰∫§ÁöÑÊñá‰ª∂Ôºö"
        git diff --cached --name-only
        
    - name: Êèê‰∫§Êõ¥Êîπ
      run: |
        # Ê∑ªÂä†ÊâÄÊúâÊñá‰ª∂
        git add .
        
        # Ê£ÄÊü•ÊòØÂê¶ÊúâÊõ¥ÊîπÈúÄË¶ÅÊèê‰∫§
        if git diff --staged --quiet; then
          echo "Ê≤°ÊúâÈúÄË¶ÅÊèê‰∫§ÁöÑÊõ¥Êîπ"
        else
          echo "Êèê‰∫§È°πÁõÆÁªìÊûÑÊñá‰ª∂..."
          git commit -m "üöÄ Ëá™Âä®ÂàõÂª∫ICT TechInsightÈ°πÁõÆÁªìÊûÑ

        ‚ú® Êñ∞Â¢ûÂäüËÉΩ:
        - ÂÆåÊï¥ÁöÑÈ°πÁõÆÁõÆÂΩïÁªìÊûÑ
        - PythonÂåÖÂíåÊ®°Âùó
        - ÈÖçÁΩÆÊñá‰ª∂ÂíåÁ§∫‰æã
        - ËìùÂõæÁÆ°ÁêÜÂ∑•ÂÖ∑
        - Á§∫‰æãÊï∞ÊçÆÊñá‰ª∂
        - ÊµãËØïÊ°ÜÊû∂
        - ÂºÄÂèëÁéØÂ¢ÉÈÖçÁΩÆ
        
        üìÅ ‰∏ªË¶ÅÁõÆÂΩï:
        - config/ - ÈÖçÁΩÆÊñá‰ª∂
        - workflows/blueprints/ - Make.comËìùÂõæ
        - scripts/ - ÁÆ°ÁêÜËÑöÊú¨
        - utils/ - Â∑•ÂÖ∑Ê®°Âùó
        - tests/ - ÊµãËØïÊñá‰ª∂
        - data/sample/ - Á§∫‰æãÊï∞ÊçÆ
        
        üõ†Ô∏è Ê†∏ÂøÉÂ∑•ÂÖ∑:
        - blueprint_manager.py - ËìùÂõæÁÆ°ÁêÜ
        - logger.py - Êó•ÂøóÂ∑•ÂÖ∑
        - ÂÆåÊï¥ÁöÑÊµãËØïÊ°ÜÊû∂"
          
          # Êé®ÈÄÅÂà∞ËøúÁ®ã‰ªìÂ∫ì
          git push origin main || git push origin master || echo "Êé®ÈÄÅÂ§±Ë¥•ÔºåÂèØËÉΩÈúÄË¶ÅÊ£ÄÊü•ÂàÜÊîØÂêçÁß∞"
        fi
        
    - name: ÊúÄÁªàÁä∂ÊÄÅÊä•Âëä
      run: |
        echo "üéâ ICT TechInsight È°πÁõÆÁªìÊûÑÂàõÂª∫ÂÆåÊàêÔºÅ"
        echo ""
        echo "‚úÖ ÂàõÂª∫ÁöÑ‰∏ªË¶ÅÁªÑ‰ª∂Ôºö"
        echo "- üìÅ ÂÆåÊï¥ÁöÑÁõÆÂΩïÁªìÊûÑ"
        echo "- üêç PythonÂåÖÂíåÊ®°Âùó"
        echo "- ‚öôÔ∏è ÈÖçÁΩÆÊñá‰ª∂ÂíåÁéØÂ¢ÉÂèòÈáèÊ®°Êùø"
        echo "- üîß ËìùÂõæÁÆ°ÁêÜÂ∑•ÂÖ∑"
        echo "- üìä Á§∫‰æãÊï∞ÊçÆÊñá‰ª∂"
        echo "- üß™ ÊµãËØïÊ°ÜÊû∂"
        echo "- üìö ÊñáÊ°£ÂíåËØ¥Êòé"
        echo ""
        echo "üöÄ ‰∏ã‰∏ÄÊ≠•Êìç‰ΩúÔºö"
        echo "1. ‰∏ä‰º†ÊÇ®ÁöÑMake.comËìùÂõæÊñá‰ª∂Âà∞ workflows/blueprints/ ÂØπÂ∫îÁõÆÂΩï"
        echo "2. Â§çÂà∂ config/api_keys.example.env ‰∏∫ .env Âπ∂ÈÖçÁΩÆAPIÂØÜÈí•"
        echo "3. Âú®Êú¨Âú∞ÂÖãÈöÜ‰ªìÂ∫ìÂπ∂ËÆæÁΩÆPythonËôöÊãüÁéØÂ¢É"
        echo "4. ËøêË°å pytest tests/ È™åËØÅÈ°πÁõÆÁªìÊûÑ"
        echo ""
        echo "üìñ ËØ¶ÁªÜ‰ΩøÁî®ËØ¥ÊòéËØ∑Êü•Áúã README.md"
