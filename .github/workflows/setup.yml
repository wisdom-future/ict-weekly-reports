name: 自动创建项目结构

on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]
    paths: [ '.github/workflows/setup.yml' ]

jobs:
  setup-project:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: 创建项目结构
      run: |
        echo "🚀 创建ICT TechInsight项目结构..."
        
        # 创建目录结构
        mkdir -p config workflows/blueprints/{competitor_intelligence,academic_research,opensource_ecosystem,ai_analysis} workflows/{docs,schemas} scripts utils tests data/{sample,schemas} docs deployment/{docker,kubernetes}
        
        # 创建Python包文件
        touch scripts/__init__.py utils/__init__.py tests/__init__.py config/__init__.py
        
        # 创建requirements.txt
        cat > requirements.txt << 'EOF'
        requests>=2.31.0
        jsonschema>=4.17.0
        python-dateutil>=2.8.2
        pandas>=2.0.0
        numpy>=1.24.0
        python-dotenv>=1.0.0
        pytest>=7.3.0
        google-api-python-client>=2.86.0
        black>=23.0.0
        flake8>=6.0.0
        EOF
        
        # 创建.gitignore
        cat > .gitignore << 'EOF'
        __pycache__/
        *.py[cod]
        .Python
        venv/
        .env
        *.log
        .DS_Store
        Thumbs.db
        EOF
        
        # 创建配置文件
        cat > config/settings.py << 'EOF'
        """ICT TechInsight 配置设置"""
        import os
        from pathlib import Path

        PROJECT_ROOT = Path(__file__).parent.parent
        MAKE_API_KEY = os.getenv("MAKE_API_KEY", "")
        MAKE_TEAM_ID = os.getenv("MAKE_TEAM_ID", "")
        ALERT_EMAIL = os.getenv("ALERT_EMAIL", "")
        EOF
        
        # 创建API密钥示例文件
        cat > config/api_keys.example.env << 'EOF'
        MAKE_API_KEY=your_make_api_key_here
        MAKE_TEAM_ID=your_team_id_here
        ALERT_EMAIL=your_alert_email@example.com
        OPENAI_API_KEY=your_openai_key_here
        XAI_API_KEY=your_xai_key_here
        EOF
        
        # 创建日志工具
        cat > utils/logger.py << 'EOF'
        """日志配置模块"""
        import logging
        import sys
        from pathlib import Path
        from datetime import datetime

        def setup_logger(name: str, level: str = "INFO"):
            """设置日志记录器"""
            log_dir = Path("logs")
            log_dir.mkdir(exist_ok=True)
            
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            
            logger = logging.getLogger(name)
            logger.setLevel(getattr(logging, level.upper()))
            
            if logger.handlers:
                return logger
            
            # 控制台输出
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setFormatter(formatter)
            logger.addHandler(console_handler)
            
            return logger
        EOF
        
        # 创建蓝图管理器
        cat > scripts/blueprint_manager.py << 'EOF'
        #!/usr/bin/env python3
        """蓝图管理器"""
        import json
        import argparse
        from pathlib import Path
        from typing import Dict, List

        class BlueprintManager:
            def __init__(self, base_path: str = "workflows/blueprints"):
                self.base_path = Path(base_path)
            
            def organize_blueprints(self):
                """整理蓝图文件到相应目录"""
                print("整理蓝图文件...")
                
                blueprint_files = {
                    "Competitor_Intelligence_Collection.blueprint.json": "competitor_intelligence",
                    "Academic_Research_Collection.blueprint.json": "academic_research",
                    "OpenSource_Ecosystem_Collection.blueprint.json": "opensource_ecosystem",
                    "ICT_TechInsight_MultiModel_AI_Analysis_v3.0.blueprint.json": "ai_analysis"
                }
                
                for filename, category in blueprint_files.items():
                    print(f"查找文件: {filename}")
                    # 蓝图文件需要手动上传
                
            def list_workflows(self) -> Dict:
                """列出所有工作流"""
                workflows = {}
                
                for category_dir in self.base_path.iterdir():
                    if category_dir.is_dir():
                        category_workflows = []
                        for blueprint_file in category_dir.glob("*.json"):
                            category_workflows.append({
                                "file": blueprint_file.name,
                                "path": str(blueprint_file)
                            })
                        workflows[category_dir.name] = category_workflows
                
                return workflows

        def main():
            parser = argparse.ArgumentParser(description="ICT TechInsight Blueprint Manager")
            parser.add_argument("action", choices=["organize", "list"], help="要执行的操作")
            
            args = parser.parse_args()
            
            manager = BlueprintManager()
            
            if args.action == "organize":
                manager.organize_blueprints()
            elif args.action == "list":
                workflows = manager.list_workflows()
                print(json.dumps(workflows, indent=2, ensure_ascii=False))

        if __name__ == "__main__":
            main()
        EOF
        
        # 创建数据验证器
        cat > scripts/data_validator.py << 'EOF'
        #!/usr/bin/env python3
        """数据验证器"""
        import json
        import argparse
        from typing import Dict
        from pathlib import Path

        class DataValidator:
            def validate_competitor_data(self, data: Dict) -> Dict:
                """验证竞争对手数据"""
                result = {
                    "valid": True,
                    "errors": [],
                    "warnings": []
                }
                
                required_fields = [
                    "company_name", "industry_category", "competitive_threat_level",
                    "innovation_index", "recent_news_count", "github_activity_score"
                ]
                
                for field in required_fields:
                    if field not in data or data[field] is None:
                        result["errors"].append(f"缺少必需字段: {field}")
                        result["valid"] = False
                
                return result

        def main():
            parser = argparse.ArgumentParser(description="ICT TechInsight Data Validator")
            parser.add_argument("data_type", choices=["competitor", "academic", "opensource"])
            parser.add_argument("--file", required=True, help="要验证的数据文件")
            
            args = parser.parse_args()
            
            validator = DataValidator()
            
            try:
                with open(args.file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                if args.data_type == "competitor":
                    result = validator.validate_competitor_data(data)
                
                print(json.dumps(result, indent=2, ensure_ascii=False))
            
            except Exception as e:
                print(f"验证失败: {str(e)}")

        if __name__ == "__main__":
            main()
        EOF
        
        # 创建示例数据
        cat > data/sample/competitor_sample.json << 'EOF'
        {
          "company_name": "Example Corp",
          "industry_category": "Technology",
          "competitive_threat_level": "MEDIUM",
          "innovation_index": 75.5,
          "recent_news_count": 12,
          "github_activity_score": 850,
          "recent_patents_count": 3,
          "monitor_timestamp": "2024-06-17T10:30:00Z"
        }
        EOF
        
        cat > data/sample/academic_sample.json << 'EOF'
        {
          "paper_title": "Advanced Machine Learning Techniques in ICT",
          "authors": "Smith, J.; Johnson, A.; Brown, M.",
          "journal": "IEEE Transactions on Technology",
          "publish_date": "2024-05-15",
          "citation_count": 25,
          "doi": "10.1109/example.2024.001",
          "abstract": "This paper presents novel approaches to machine learning in ICT applications..."
        }
        EOF
        
        cat > data/sample/opensource_sample.json << 'EOF'
        {
          "repo_name": "awesome-ict-project/main",
          "description": "An innovative ICT framework for modern applications",
          "stars": 1250,
          "forks": 180,
          "language": "Python",
          "activity_score": 950,
          "maturity_level": "GROWING",
          "last_commit_days": 3
        }
        EOF
        
        # 创建测试文件
        cat > tests/test_blueprints.py << 'EOF'
        """蓝图测试模块"""
        import pytest
        import json
        from pathlib import Path

        def test_project_structure():
            """测试项目结构"""
            assert Path("config").exists()
            assert Path("scripts").exists()
            assert Path("utils").exists()
            assert Path("workflows/blueprints").exists()
            assert Path("data/sample").exists()

        def test_sample_data():
            """测试示例数据"""
            sample_files = [
                "data/sample/competitor_sample.json",
                "data/sample/academic_sample.json",
                "data/sample/opensource_sample.json"
            ]
            
            for sample_file in sample_files:
                path = Path(sample_file)
                assert path.exists(), f"示例文件不存在: {sample_file}"
                
                with open(path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                assert isinstance(data, dict), f"{sample_file} 必须是JSON对象"
                assert len(data) > 0, f"{sample_file} 不能为空"
        EOF
        
        # 更新README
        cat > README.md << 'EOF'
        # ICT TechInsight 自动化系统

        基于Make.com的ICT技术洞察自动化数据收集和分析系统。

        ## 🚀 快速开始

        ### 1. 克隆项目
        ```bash
        git clone https://github.com/your-username/ICT-TechInsight-Automation.git
        cd ICT-TechInsight-Automation
        ```

        ### 2. 设置Python环境
        ```bash
        # 创建虚拟环境
        python -m venv venv

        # 激活虚拟环境 (Windows)
        venv\Scripts\activate

        # 激活虚拟环境 (Linux/Mac)
        source venv/bin/activate

        # 安装依赖
        pip install -r requirements.txt
        ```

        ### 3. 配置API密钥
        ```bash
        # 复制配置文件
        cp config/api_keys.example.env .env

        # 编辑配置文件
        # 填入您的 Make.com API 密钥和其他必要配置
        ```

        ### 4. 上传蓝图文件
        将您的Make.com蓝图文件上传到对应目录：
        - `workflows/blueprints/competitor_intelligence/`
        - `workflows/blueprints/academic_research/`
        - `workflows/blueprints/opensource_ecosystem/`
        - `workflows/blueprints/ai_analysis/`

        ### 5. 运行测试
        ```bash
        pytest tests/
        ```

        ## 📁 项目结构

        ```
        ICT-TechInsight-Automation/
        ├── README.md
        ├── requirements.txt
        ├── .gitignore
        ├── config/                 # 配置文件
        │   ├── settings.py
        │   └── api_keys.example.env
        ├── workflows/              # Make.com工作流
        │   ├── blueprints/        # 蓝图文件
        │   │   ├── competitor_intelligence/
        │   │   ├── academic_research/
        │   │   ├── opensource_ecosystem/
        │   │   └── ai_analysis/
        │   ├── docs/              # 工作流文档
        │   └── schemas/           # 数据架构
        ├── scripts/               # 管理脚本
        │   ├── blueprint_manager.py
        │   └── data_validator.py
        ├── utils/                 # 工具模块
        │   └── logger.py
        ├── tests/                 # 测试文件
        │   └── test_blueprints.py
        ├── data/                  # 数据文件
        │   └── sample/           # 示例数据
        └── deployment/            # 部署配置
        ```

        ## 🛠️ 工具使用

        ### 蓝图管理
        ```bash
        python scripts/blueprint_manager.py organize
        python scripts/blueprint_manager.py list
        ```

        ### 数据验证
        ```bash
        python scripts/data_validator.py competitor --file data/sample/competitor_sample.json
        python scripts/data_validator.py academic --file data/sample/academic_sample.json
        python scripts/data_validator.py opensource --file data/sample/opensource_sample.json
        ```

        ## 📊 核心功能

        - 🔍 **竞争对手情报收集** - 自动监控竞争对手动态
        - 📚 **学术研究收集** - 收集和分析学术论文
        - 🌟 **开源生态监控** - 跟踪开源项目和技术趋势
        - 🤖 **多模型AI分析** - 智能分析和决策支持

        ## 🤝 贡献指南

        1. Fork 项目
        2. 创建特性分支 (`git checkout -b feature/AmazingFeature`)
        3. 提交变更 (`git commit -m 'Add some AmazingFeature'`)
        4. 推送到分支 (`git push origin feature/AmazingFeature`)
        5. 开启 Pull Request

        ## 📄 许可证

        MIT License - 详见 [LICENSE](LICENSE) 文件
        EOF
        
        echo "✅ 项目结构创建完成！"
        echo "📁 目录结构："
        find . -type d | head -20
        echo "📄 主要文件："
        find . -name "*.py" -o -name "*.json" -o -name "*.txt" -o -name "*.md" | head -20

    - name: 提交文件
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --staged --quiet || git commit -m "🚀 自动创建ICT TechInsight项目结构"
        git push
